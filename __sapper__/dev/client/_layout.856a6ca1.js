import { _ as identity, w as get_store_value, x as client, S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, y as validate_each_argument, $ as create_slot, v as validate_slots, a as stores$1, b as validate_store, c as component_subscribe, B as set_store_value, D as feather, e as element, f as space, g as claim_element, h as children, k as detach_dev, l as claim_space, m as attr_dev, n as add_location, o as insert_hydration_dev, p as append_hydration_dev, I as transition_in, J as transition_out, N as check_outros, q as listen_dev, a0 as update_slot_base, a1 as get_all_dirty_from_scope, a2 as get_slot_changes, K as destroy_each, R as run_all, t as text, j as claim_text, r as set_data_dev, W as add_render_callback, a3 as create_in_transition, a4 as create_out_transition, M as group_outros } from './client.054efc5b.js';

function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
    const o = +getComputedStyle(node).opacity;
    return {
        delay,
        duration,
        easing,
        css: t => `opacity: ${t * o}`
    };
}

/* src/routes/panel/_layout.svelte generated by Svelte v3.42.1 */
const file = "src/routes/panel/_layout.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (61:14) {#if navHover}
function create_if_block(ctx) {
	let span;
	let t_value = /*navItem*/ ctx[10].text + "";
	let t;
	let span_intro;
	let span_outro;
	let current;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(span, file, 61, 16, 1956);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, span, anchor);
			append_hydration_dev(span, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty & /*navItems*/ 2) && t_value !== (t_value = /*navItem*/ ctx[10].text + "")) set_data_dev(t, t_value);
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (span_outro) span_outro.end(1);
				span_intro = create_in_transition(span, fade, { duration: 200, delay: 50 });
				span_intro.start();
			});

			current = true;
		},
		o: function outro(local) {
			if (span_intro) span_intro.invalidate();
			span_outro = create_out_transition(span, fade, { duration: 0, delay: 0 });
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (detaching && span_outro) span_outro.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(61:14) {#if navHover}",
		ctx
	});

	return block;
}

// (57:8) {#each navItems as navItem}
function create_each_block(ctx) {
	let li;
	let a;
	let i;
	let i_class_value;
	let t0;
	let a_href_value;
	let t1;
	let li_arria_current_value;
	let current;
	let if_block = /*navHover*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			i = element("i");
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { "arria-current": true, class: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			i = claim_element(a_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			t0 = claim_space(a_nodes);
			if (if_block) if_block.l(a_nodes);
			a_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", i_class_value = " w-8  " + /*navItem*/ ctx[10].icon + " svelte-1yzwhdn");
			add_location(i, file, 59, 14, 1874);
			attr_dev(a, "href", a_href_value = /*navItem*/ ctx[10].path);
			attr_dev(a, "class", "block w-full h-full p-3 svelte-1yzwhdn");
			add_location(a, file, 58, 12, 1802);
			attr_dev(li, "arria-current", li_arria_current_value = /*navItem*/ ctx[10].curent);
			attr_dev(li, "class", "w-[calc(100%_-_0.5rem)]  duration-200 transition-colors hover:text-white hover:bg-rose-800 svelte-1yzwhdn");
			add_location(li, file, 57, 10, 1653);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, li, anchor);
			append_hydration_dev(li, a);
			append_hydration_dev(a, i);
			append_hydration_dev(a, t0);
			if (if_block) if_block.m(a, null);
			append_hydration_dev(li, t1);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*navItems*/ 2 && i_class_value !== (i_class_value = " w-8  " + /*navItem*/ ctx[10].icon + " svelte-1yzwhdn")) {
				attr_dev(i, "class", i_class_value);
			}

			if (/*navHover*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*navHover*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(a, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*navItems*/ 2 && a_href_value !== (a_href_value = /*navItem*/ ctx[10].path)) {
				attr_dev(a, "href", a_href_value);
			}

			if (!current || dirty & /*navItems*/ 2 && li_arria_current_value !== (li_arria_current_value = /*navItem*/ ctx[10].curent)) {
				attr_dev(li, "arria-current", li_arria_current_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(57:8) {#each navItems as navItem}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div2;
	let aside;
	let nav;
	let ul;
	let t;
	let div1;
	let div0;
	let current;
	let mounted;
	let dispose;
	let each_value = /*navItems*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	const block = {
		c: function create() {
			div2 = element("div");
			aside = element("aside");
			nav = element("nav");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			aside = claim_element(div2_nodes, "ASIDE", { class: true });
			var aside_nodes = children(aside);
			nav = claim_element(aside_nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			ul = claim_element(nav_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			aside_nodes.forEach(detach_dev);
			t = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (default_slot) default_slot.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "flex flex-col h-full  w-22 hover:w-62  items-center justify-center fixed  duration-75               bg-rose-500 shadow shadow-xl shadow-dark-900 drop-shadow-md svelte-1yzwhdn");
			add_location(ul, file, 55, 6, 1434);
			attr_dev(nav, "class", "h-full w-22 svelte-1yzwhdn");
			add_location(nav, file, 54, 4, 1294);
			attr_dev(aside, "class", " svelte-1yzwhdn");
			add_location(aside, file, 53, 2, 1273);
			attr_dev(div0, "class", "flex-1 svelte-1yzwhdn");
			add_location(div0, file, 72, 4, 2245);
			attr_dev(div1, "class", "w-full flex flex-col  svelte-1yzwhdn");
			add_location(div1, file, 71, 2, 2205);
			attr_dev(div2, "class", "w-full h-full flex  select-none svelte-1yzwhdn");
			add_location(div2, file, 52, 0, 1225);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div2, anchor);
			append_hydration_dev(div2, aside);
			append_hydration_dev(aside, nav);
			append_hydration_dev(nav, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append_hydration_dev(div2, t);
			append_hydration_dev(div2, div1);
			append_hydration_dev(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(nav, "mouseenter", /*mouseenter_handler*/ ctx[7], false, false, false),
					listen_dev(nav, "mouseleave", /*mouseleave_handler*/ ctx[8], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*navItems, navHover*/ 3) {
				each_value = /*navItems*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	{
		const users = await get_store_value(feather).service("users").find();
		const createAdmin = users.data.length === 0 ? true : false;
		get_store_value(feather).configure(client.authentication({ storage: window.localStorage }));
		const client$1 = get_store_value(feather);
		if (createAdmin) return this.redirect(302, "/create_admin");
		const user = await client$1.reAuthenticate().catch(() => false);
		if (user) return { user: user?.user }; else this.redirect(302, "/signin");
	}
}

function instance($$self, $$props, $$invalidate) {
	let navItems;
	let $session;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Layout', slots, ['default']);
	const { session } = stores$1();
	validate_store(session, 'session');
	component_subscribe($$self, session, value => $$invalidate(9, $session = value));
	let { segment, user } = $$props;
	set_store_value(session, $session = { user }, $session);
	let navHover = false;
	const writable_props = ['segment', 'user'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Layout> was created with unknown prop '${key}'`);
	});

	const mouseenter_handler = () => setTimeout(() => $$invalidate(0, navHover = true), 200);
	const mouseleave_handler = () => $$invalidate(0, navHover = false);

	$$self.$$set = $$props => {
		if ('segment' in $$props) $$invalidate(3, segment = $$props.segment);
		if ('user' in $$props) $$invalidate(4, user = $$props.user);
		if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		get: get_store_value,
		feather,
		feathers: client,
		preload,
		stores: stores$1,
		session,
		fade,
		segment,
		user,
		navHover,
		navItems,
		$session
	});

	$$self.$inject_state = $$props => {
		if ('segment' in $$props) $$invalidate(3, segment = $$props.segment);
		if ('user' in $$props) $$invalidate(4, user = $$props.user);
		if ('navHover' in $$props) $$invalidate(0, navHover = $$props.navHover);
		if ('navItems' in $$props) $$invalidate(1, navItems = $$props.navItems);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*segment*/ 8) {
			$$invalidate(1, navItems = [
				{
					icon: "fa fa-upload",
					text: "Yüklenenler",
					path: "/panel/",
					curent: segment === undefined ? "page" : undefined
				},
				{
					icon: "fas fa-folder",
					text: "Katagoriler",
					path: "/panel/tree",
					curent: segment === "tree" ? "page" : undefined
				}
			]);
		}
	};

	return [
		navHover,
		navItems,
		session,
		segment,
		user,
		$$scope,
		slots,
		mouseenter_handler,
		mouseleave_handler
	];
}

class Layout extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { segment: 3, user: 4 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Layout",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*segment*/ ctx[3] === undefined && !('segment' in props)) {
			console.warn("<Layout> was created without expected prop 'segment'");
		}

		if (/*user*/ ctx[4] === undefined && !('user' in props)) {
			console.warn("<Layout> was created without expected prop 'user'");
		}
	}

	get segment() {
		throw new Error("<Layout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set segment(value) {
		throw new Error("<Layout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get user() {
		throw new Error("<Layout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set user(value) {
		throw new Error("<Layout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Layout as default, preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

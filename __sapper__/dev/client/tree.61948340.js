import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, a5 as createEventDispatcher, t as text, j as claim_text, o as insert_hydration_dev, r as set_data_dev, k as detach_dev, e as element, f as space, g as claim_element, h as children, l as claim_space, m as attr_dev, n as add_location, p as append_hydration_dev, q as listen_dev, u as noop, b as validate_store, D as feather, c as component_subscribe, P as set_input_value, Q as prevent_default, V as prop_dev, R as run_all, w as get_store_value, z as binding_callbacks, A as bind, y as validate_each_argument, C as onMount, E as create_component, F as claim_component, G as mount_component, H as add_flush_callback, I as transition_in, J as transition_out, L as destroy_component, K as destroy_each } from './client.aa460f1a.js';
import { M as Modal } from './modal.e1724cd8.js';

/* src/lib/components/panel/cardButton.svelte generated by Svelte v3.42.1 */
const file$2 = "src/lib/components/panel/cardButton.svelte";

// (18:4) {#if data.value}
function create_if_block(ctx) {
	let t_value = /*data*/ ctx[0].value + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*data*/ 1 && t_value !== (t_value = /*data*/ ctx[0].value + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(18:4) {#if data.value}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div;
	let span;
	let i;
	let i_class_value;
	let t0;
	let h2;
	let t1;
	let h3;
	let t2_value = /*data*/ ctx[0].title + "";
	let t2;
	let mounted;
	let dispose;
	let if_block = /*data*/ ctx[0].value && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			span = element("span");
			i = element("i");
			t0 = space();
			h2 = element("h2");
			if (if_block) if_block.c();
			t1 = space();
			h3 = element("h3");
			t2 = text(t2_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			span = claim_element(div_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			i = claim_element(span_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			span_nodes.forEach(detach_dev);
			t0 = claim_space(div_nodes);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			if (if_block) if_block.l(h2_nodes);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			h3 = claim_element(div_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t2 = claim_text(h3_nodes, t2_value);
			h3_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", i_class_value = "" + (/*data*/ ctx[0].icon + " fa-2x" + " svelte-10or6yi"));
			add_location(i, file$2, 13, 4, 380);
			attr_dev(span, "class", "block w-16 h-16 bg-white rounded-1 flex items-center justify-center cursor-pointer svelte-10or6yi");
			add_location(span, file$2, 12, 2, 246);
			attr_dev(h2, "class", "p-3 uppercase text-xl font-bold text-dark-400 svelte-10or6yi");
			add_location(h2, file$2, 16, 2, 427);
			attr_dev(h3, "class", "p-3 uppercase text-xl font-bold text-dark-400 svelte-10or6yi");
			add_location(h3, file$2, 22, 2, 547);
			attr_dev(div, "class", "card  svelte-10or6yi");
			add_location(div, file$2, 11, 0, 224);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, span);
			append_hydration_dev(span, i);
			append_hydration_dev(div, t0);
			append_hydration_dev(div, h2);
			if (if_block) if_block.m(h2, null);
			append_hydration_dev(div, t1);
			append_hydration_dev(div, h3);
			append_hydration_dev(h3, t2);

			if (!mounted) {
				dispose = listen_dev(span, "click", /*click_handler*/ ctx[2], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*data*/ 1 && i_class_value !== (i_class_value = "" + (/*data*/ ctx[0].icon + " fa-2x" + " svelte-10or6yi"))) {
				attr_dev(i, "class", i_class_value);
			}

			if (/*data*/ ctx[0].value) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(h2, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*data*/ 1 && t2_value !== (t2_value = /*data*/ ctx[0].title + "")) set_data_dev(t2, t2_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('CardButton', slots, []);
	const dispatch = createEventDispatcher();
	let { data = { title: "title", icon: "fa fa-list" } } = $$props;
	const dispatcher = async () => dispatch("click");
	const writable_props = ['data'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CardButton> was created with unknown prop '${key}'`);
	});

	const click_handler = () => dispatcher();

	$$self.$$set = $$props => {
		if ('data' in $$props) $$invalidate(0, data = $$props.data);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		dispatch,
		data,
		dispatcher
	});

	$$self.$inject_state = $$props => {
		if ('data' in $$props) $$invalidate(0, data = $$props.data);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [data, dispatcher, click_handler];
}

class CardButton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { data: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CardButton",
			options,
			id: create_fragment$2.name
		});
	}

	get data() {
		throw new Error("<CardButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data(value) {
		throw new Error("<CardButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/lib/components/panel/addTreeModal.svelte generated by Svelte v3.42.1 */
const file$1 = "src/lib/components/panel/addTreeModal.svelte";

function create_fragment$1(ctx) {
	let div;
	let span;
	let t0;
	let t1;
	let p;
	let t2;
	let t3;
	let form;
	let input;
	let t4;
	let button;
	let t5_value = (/*disabled*/ ctx[2] ? "Kaydediliyor..." : "Kaydet") + "";
	let t5;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			span = element("span");
			t0 = text("x");
			t1 = space();
			p = element("p");
			t2 = text("/ - _ % gibi özel karakterler içermemelidir");
			t3 = space();
			form = element("form");
			input = element("input");
			t4 = space();
			button = element("button");
			t5 = text(t5_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			span = claim_element(div_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "x");
			span_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "/ - _ % gibi özel karakterler içermemelidir");
			p_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			form = claim_element(div_nodes, "FORM", { class: true });
			var form_nodes = children(form);

			input = claim_element(form_nodes, "INPUT", {
				type: true,
				placeholder: true,
				class: true
			});

			t4 = claim_space(form_nodes);
			button = claim_element(form_nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			t5 = claim_text(button_nodes, t5_value);
			button_nodes.forEach(detach_dev);
			form_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "p-2 text-white  w-6 svelte-38sf33");
			add_location(span, file$1, 22, 2, 482);
			attr_dev(p, "class", "text-white svelte-38sf33");
			add_location(p, file$1, 23, 2, 563);
			attr_dev(input, "type", "text");
			attr_dev(input, "placeholder", "categori");
			attr_dev(input, "class", "p-2 rounded text-dark-900 svelte-38sf33");
			input.required = true;
			add_location(input, file$1, 25, 4, 749);
			attr_dev(button, "type", "submit");
			button.disabled = /*disabled*/ ctx[2];
			attr_dev(button, "class", "w-full p-3 text-white svelte-38sf33");
			add_location(button, file$1, 27, 4, 862);
			attr_dev(form, "class", "flex flex-col items-center justify-center gap-6 svelte-38sf33");
			add_location(form, file$1, 24, 2, 635);
			attr_dev(div, "class", "w-122 bg-dark-500 flex flex-col p-12  justify-center gap-6 svelte-38sf33");
			add_location(div, file$1, 21, 0, 407);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, span);
			append_hydration_dev(span, t0);
			append_hydration_dev(div, t1);
			append_hydration_dev(div, p);
			append_hydration_dev(p, t2);
			append_hydration_dev(div, t3);
			append_hydration_dev(div, form);
			append_hydration_dev(form, input);
			set_input_value(input, /*text*/ ctx[1]);
			append_hydration_dev(form, t4);
			append_hydration_dev(form, button);
			append_hydration_dev(button, t5);

			if (!mounted) {
				dispose = [
					listen_dev(span, "click", /*click_handler*/ ctx[4], false, false, false),
					listen_dev(input, "input", /*input_input_handler*/ ctx[5]),
					listen_dev(form, "submit", prevent_default(/*handleNewCategory*/ ctx[3]), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*text*/ 2 && input.value !== /*text*/ ctx[1]) {
				set_input_value(input, /*text*/ ctx[1]);
			}

			if (dirty & /*disabled*/ 4 && t5_value !== (t5_value = (/*disabled*/ ctx[2] ? "Kaydediliyor..." : "Kaydet") + "")) set_data_dev(t5, t5_value);

			if (dirty & /*disabled*/ 4) {
				prop_dev(button, "disabled", /*disabled*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let $feather;
	validate_store(feather, 'feather');
	component_subscribe($$self, feather, $$value => $$invalidate(6, $feather = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('AddTreeModal', slots, []);
	let text, disabled = false;
	let { show } = $$props;

	async function handleNewCategory() {
		try {
			$$invalidate(2, disabled = true);
			const newTree = await $feather.service("uploadthree").create({ text });
			$$invalidate(2, disabled = false);
			$$invalidate(0, show = false);
		} catch(error) {
			if (error) {
				alert(error);
				$$invalidate(2, disabled = false);
				$$invalidate(1, text = "");
			}
		}
	}

	const writable_props = ['show'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AddTreeModal> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(0, show = false);

	function input_input_handler() {
		text = this.value;
		$$invalidate(1, text);
	}

	$$self.$$set = $$props => {
		if ('show' in $$props) $$invalidate(0, show = $$props.show);
	};

	$$self.$capture_state = () => ({
		feather,
		text,
		disabled,
		show,
		handleNewCategory,
		$feather
	});

	$$self.$inject_state = $$props => {
		if ('text' in $$props) $$invalidate(1, text = $$props.text);
		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
		if ('show' in $$props) $$invalidate(0, show = $$props.show);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [show, text, disabled, handleNewCategory, click_handler, input_input_handler];
}

class AddTreeModal extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { show: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AddTreeModal",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*show*/ ctx[0] === undefined && !('show' in props)) {
			console.warn("<AddTreeModal> was created without expected prop 'show'");
		}
	}

	get show() {
		throw new Error("<AddTreeModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show(value) {
		throw new Error("<AddTreeModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/panel/tree.svelte generated by Svelte v3.42.1 */
const file = "src/routes/panel/tree.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (41:6) {#each catalogs?.data || [] as data}
function create_each_block(ctx) {
	let li;
	let div0;
	let t0_value = /*data*/ ctx[7].text + "";
	let t0;
	let t1;
	let div1;
	let t2;
	let t3;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[4](/*data*/ ctx[7]);
	}

	const block = {
		c: function create() {
			li = element("li");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			t2 = text("sil");
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			div0 = claim_element(li_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, t0_value);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);
			div1 = claim_element(li_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t2 = claim_text(div1_nodes, "sil");
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "w-full svelte-1aibcvx");
			add_location(div0, file, 42, 10, 1319);
			attr_dev(div1, "class", "sil hidden cursor-pointer svelte-1aibcvx");
			add_location(div1, file, 43, 10, 1367);
			attr_dev(li, "class", "categoryItem p-2 bg-dark-700 hover:bg-rose-500 duration-500 flex svelte-1aibcvx");
			add_location(li, file, 41, 8, 1231);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, li, anchor);
			append_hydration_dev(li, div0);
			append_hydration_dev(div0, t0);
			append_hydration_dev(li, t1);
			append_hydration_dev(li, div1);
			append_hydration_dev(div1, t2);
			append_hydration_dev(li, t3);

			if (!mounted) {
				dispose = listen_dev(div1, "click", click_handler, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*catalogs*/ 2 && t0_value !== (t0_value = /*data*/ ctx[7].text + "")) set_data_dev(t0, t0_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(41:6) {#each catalogs?.data || [] as data}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let modal;
	let updating_show;
	let t0;
	let div2;
	let div0;
	let ul;
	let t1;
	let div1;
	let cardbutton0;
	let t2;
	let cardbutton1;
	let current;

	function modal_show_binding(value) {
		/*modal_show_binding*/ ctx[3](value);
	}

	let modal_props = { component: AddTreeModal };

	if (/*showAddCategoryModal*/ ctx[0] !== void 0) {
		modal_props.show = /*showAddCategoryModal*/ ctx[0];
	}

	modal = new Modal({ props: modal_props, $$inline: true });
	binding_callbacks.push(() => bind(modal, 'show', modal_show_binding));
	let each_value = /*catalogs*/ ctx[1]?.data || [];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	cardbutton0 = new CardButton({
			props: {
				data: {
					title: 'Toplam kategori',
					icon: 'fas fa-list',
					value: /*catalogs*/ ctx[1]?.total
				}
			},
			$$inline: true
		});

	cardbutton1 = new CardButton({
			props: {
				data: {
					title: 'Yeni kategori ekle',
					icon: 'fas fa-list'
				}
			},
			$$inline: true
		});

	cardbutton1.$on("click", /*click_handler_1*/ ctx[5]);

	const block = {
		c: function create() {
			create_component(modal.$$.fragment);
			t0 = space();
			div2 = element("div");
			div0 = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			div1 = element("div");
			create_component(cardbutton0.$$.fragment);
			t2 = space();
			create_component(cardbutton1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(modal.$$.fragment, nodes);
			t0 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			ul = claim_element(div0_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(cardbutton0.$$.fragment, div1_nodes);
			t2 = claim_space(div1_nodes);
			claim_component(cardbutton1.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "h-full bg-dark-500 p-3 text-white flex flex-col gap-1 svelte-1aibcvx");
			add_location(ul, file, 39, 4, 1113);
			attr_dev(div0, "class", "md:w-full lg:w-2/4 xl:w-1/4 svelte-1aibcvx");
			add_location(div0, file, 38, 2, 1067);
			attr_dev(div1, "class", "flex-1 w-full grid grid-cols-1 md:grid-cols-1 lg:grid-cols-2 xl:grid-cols-3   gap-12 svelte-1aibcvx");
			add_location(div1, file, 48, 2, 1515);
			attr_dev(div2, "class", "w-full h-full flex flex-col lg:flex-row gap-6  p-12 svelte-1aibcvx");
			add_location(div2, file, 37, 0, 999);
		},
		m: function mount(target, anchor) {
			mount_component(modal, target, anchor);
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, div2, anchor);
			append_hydration_dev(div2, div0);
			append_hydration_dev(div0, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append_hydration_dev(div2, t1);
			append_hydration_dev(div2, div1);
			mount_component(cardbutton0, div1, null);
			append_hydration_dev(div1, t2);
			mount_component(cardbutton1, div1, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const modal_changes = {};

			if (!updating_show && dirty & /*showAddCategoryModal*/ 1) {
				updating_show = true;
				modal_changes.show = /*showAddCategoryModal*/ ctx[0];
				add_flush_callback(() => updating_show = false);
			}

			modal.$set(modal_changes);

			if (dirty & /*handleCategoryDelete, catalogs*/ 6) {
				each_value = /*catalogs*/ ctx[1]?.data || [];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			const cardbutton0_changes = {};

			if (dirty & /*catalogs*/ 2) cardbutton0_changes.data = {
				title: 'Toplam kategori',
				icon: 'fas fa-list',
				value: /*catalogs*/ ctx[1]?.total
			};

			cardbutton0.$set(cardbutton0_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);
			transition_in(cardbutton0.$$.fragment, local);
			transition_in(cardbutton1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(modal.$$.fragment, local);
			transition_out(cardbutton0.$$.fragment, local);
			transition_out(cardbutton1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(modal, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
			destroy_component(cardbutton0);
			destroy_component(cardbutton1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload() {
	{
		const client = get_store_value(feather);
		const catalogs = await client.service("uploadthree").find();
		return { catalogs };
	}
}

function instance($$self, $$props, $$invalidate) {
	let $feather;
	validate_store(feather, 'feather');
	component_subscribe($$self, feather, $$value => $$invalidate(6, $feather = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Tree', slots, []);
	let { showAddCategoryModal = false, catalogs } = $$props;

	onMount(async () => {
		const service = $feather.service("uploadthree");

		["created", "removed"].forEach(event => {
			service.on(event, async () => $$invalidate(1, catalogs = await service.find()));
		});
	});

	async function handleCategoryDelete(id) {
		await $feather.service("uploadthree").remove(id);
	}

	const writable_props = ['showAddCategoryModal', 'catalogs'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tree> was created with unknown prop '${key}'`);
	});

	function modal_show_binding(value) {
		showAddCategoryModal = value;
		$$invalidate(0, showAddCategoryModal);
	}

	const click_handler = data => handleCategoryDelete(data._id);
	const click_handler_1 = e => $$invalidate(0, showAddCategoryModal = true);

	$$self.$$set = $$props => {
		if ('showAddCategoryModal' in $$props) $$invalidate(0, showAddCategoryModal = $$props.showAddCategoryModal);
		if ('catalogs' in $$props) $$invalidate(1, catalogs = $$props.catalogs);
	};

	$$self.$capture_state = () => ({
		get: get_store_value,
		feather,
		preload,
		onMount,
		CardButton,
		Modal,
		addTreeModal: AddTreeModal,
		showAddCategoryModal,
		catalogs,
		handleCategoryDelete,
		$feather
	});

	$$self.$inject_state = $$props => {
		if ('showAddCategoryModal' in $$props) $$invalidate(0, showAddCategoryModal = $$props.showAddCategoryModal);
		if ('catalogs' in $$props) $$invalidate(1, catalogs = $$props.catalogs);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		showAddCategoryModal,
		catalogs,
		handleCategoryDelete,
		modal_show_binding,
		click_handler,
		click_handler_1
	];
}

class Tree extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { showAddCategoryModal: 0, catalogs: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tree",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*catalogs*/ ctx[1] === undefined && !('catalogs' in props)) {
			console.warn("<Tree> was created without expected prop 'catalogs'");
		}
	}

	get showAddCategoryModal() {
		throw new Error("<Tree>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set showAddCategoryModal(value) {
		throw new Error("<Tree>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get catalogs() {
		throw new Error("<Tree>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set catalogs(value) {
		throw new Error("<Tree>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Tree as default, preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
